def AGENT_LABEL = null
//Specifying agent node name
AGENT_LABEL = "JenkinsAgent"

def ENVIRONMENT_NAME="${JOB_NAME}".tokenize('-').last().toLowerCase()

pipeline{
  //agent any
     agent {//Specifying on which agent node have to run
       label "${AGENT_LABEL}"
           }
  options { //Specifying a global execution timeout of one hour, after which Jenkins will abort the Pipeline run.
    timeout(time: 1, unit: 'HOURS')
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '5'))
    disableConcurrentBuilds()
          }
// environment {// Get Docker credentials on Jenkins environment
//     DOCKER_ID = credentials('DOCKER_ID')
//     DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')
//     }
  stages {
    //run docker login
    stage ('docker login'){
      steps {
        scripts {
          sh "docker version"
          //sh "docker rmi $(docker images | grep stuff_ | tr -s ' ' | cut -d ' ' -f 3)"
          //sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_ID --password-stdin"
                }
             }
      }
        
    //run docker build locally
    stage ('docker build'){
      steps {
        script {
          //sh "docker build -f 02-primer-pipeline/Dockerfile -t caosbinario/homer_page:1.0.0-${BUILD_ID} 02-primer-pipeline"
          //sh "docker version"
            sh "docker build -f 02-primer-pipeline/Dockerfile -t cadupar/demo:1.0.0-${BUILD_ID} 02-primer-pipeline"
        }
      }
    }

    //run a docker push
    stage ('docker push'){
      steps {
        script
         //withDockerRegistry([ credentialsId: "DOCKER_HUB", url: "" ]) 
          {
          //sh "docker push caosbinario/homer_page:1.0.0-${BUILD_ID}"
          sh "docker push cadupar/demo:1.0.0-${BUILD_ID}"
        }
      }
    }
  }
 post { //Bloque post
        always { 
            echo 'always runs regardless of the completion status of the Pipeline run'
            echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
            echo "Current branch: ${env.BRANCH_NAME}"
            //Borra Dir Workspace de Jenkins (Cleanup)
            //deleteDir()
            script {
                    def result = currentBuild.result
                    if (result == null) {result = "SUCCESS"}
                    }
               }
         success {
           echo 'step will run only if the build is successful'
           echo "The pipeline ${currentBuild.fullDisplayName} completed successfully."
         }
        failure {
          echo 'only when the Pipeline is currently in a "failed" state run, usually expressed in the Web UI with the red indicator.'
         }
        unstable {
          echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
         }
    changed {
      echo 'can only be run if the current Pipeline is running at a different state than the previously completed Pipeline'
      echo "Status Changed: [From: $currentBuild.previousBuild.result, To: $currentBuild.result]"
    }
   } //fin bloque post
}
