def AGENT_LABEL = null
//Specifying agent node name
AGENT_LABEL = "JenkinsAgent"

pipeline{
  //agent any
     agent {//Specifying on which agent node have to run
       label "${AGENT_LABEL}"
    }
  options { //Specifying a global execution timeout of one hour, after which Jenkins will abort the Pipeline run.
    timeout(time: 1, unit: 'HOURS')
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '5')
  }
  stages {//run a docker build
    stage ('docker build'){
      steps {
        scripts {
          sh "docker build -f 02-primer-pipeline/Dockerfile -t caosbinario/homer_page:1.0.0-${BUILD_ID} 02-primer-pipeline"
        }
      }
    }
    //run a docker push
    stage ('docker push'){
      steps {
        scripts {
          sh "docker push caosbinario/homer_page:1.0.0-${BUILD_ID}"
        }
      }
    }
  }
 post { 
        always { 
            echo 'always runs regardless of the completion status of the Pipeline run'
          script {
                def result = currentBuild.result
                if (result == null) {
                result = "SUCCESS"
                }
          //deleteDir()
                }
   success {
      echo 'step will run only if the build is successful'
    }
    failure {
      echo 'only when the Pipeline is currently in a "failed" state run, usually expressed in the Web UI with the red indicator.'
    }
    unstable {
      echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
    }
    changed {
      echo 'can only be run if the current Pipeline is running at a different state than the previously completed Pipeline'
      echo "Status Changed: [From: $currentBuild.previousBuild.result, To: $currentBuild.result]"
    }
    }
    }   
}
